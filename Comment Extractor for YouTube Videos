Comment Extractor for One Video

import googleapiclient.discovery
import googleapiclient.errors
import pandas as pd

# Define the API service name, version, and# developer key
api_service_name = "youtube"
api_version = "v3"
DEVELOPER_KEY = "My API Key"

# Build the YouTube API client
youtube = googleapiclient.discovery.build(
    api_service_name, api_version, developerKey=DEVELOPER_KEY)

# Function to fetch details of a given video
def fetch_video_details(video_id):
    # Request video details
    video_request = youtube.videos().list(
        part="snippet,statistics",
        id=video_id
    )
    video_response = video_request.execute()
    video_details = video_response['items'][0]

    # Extract video details
    video_title = video_details['snippet']['title']
    channel_id = video_details['snippet']['channelId']
    view_count = video_details['statistics']['viewCount']
    upload_date = video_details['snippet']['publishedAt']

    # Request channel details using the channel ID
    channel_request = youtube.channels().list(
        part="snippet,statistics",
        id=channel_id
    )
    channel_response = channel_request.execute()
    channel_details = channel_response['items'][0]

    # Extract channel details
    channel_title = channel_details['snippet']['title']
    subscriber_count = channel_details['statistics']['subscriberCount']

    # Return the fetched video and channel details
    return video_title, channel_title, subscriber_count, view_count, upload_date

# Function to fetch comments for a given video
def fetch_comments(video_id):
    comments = []  # List to store comments

    # Request the first set of comments
    request = youtube.commentThreads().list(
        part="snippet",
        videoId=video_id,
        maxResults=100  # Maximum number of comments to fetch per request
    )
    response = request.execute()

    # Loop through the response and collect comments
    while response:
        for item in response['items']:
            comment = item['snippet']['topLevelComment']['snippet']

            # Append the comment details to the comments list
            comments.append({
                'Author': comment['authorDisplayName'],
                'Comment Text': comment['textDisplay'],
                'Date Published': comment['publishedAt'],
                '# of Likes': comment['likeCount'],
                'Reply Count': item['snippet']['totalReplyCount']
            })

            # Fetch replies if there are any
            if item['snippet']['totalReplyCount'] > 0:
                parent_id = item['snippet']['topLevelComment']['id']
                replies_request = youtube.comments().list(
                    part="snippet",
                    parentId=parent_id,
                    maxResults=100
                )
                replies_response = replies_request.execute()

                for reply in replies_response['items']:
                    reply_snippet = reply['snippet']

                    # Append the reply details to the comments list
                    comments.append({
                        'Author': reply_snippet['authorDisplayName'],
                        'Comment Text': reply_snippet['textDisplay'],
                        'Date Published': reply_snippet['publishedAt'],
                        '# of Likes': reply_snippet['likeCount'],
                        'Reply Count': ''  # Reply count is not applicable for replies
                    })

        # Check if there are more pages of comments
        if 'nextPageToken' in response:
            # If there are more pages, fetch the next set of comments
            request = youtube.commentThreads().list(
                part="snippet",
                videoId=video_id,
                maxResults=100,
                pageToken=response['nextPageToken']
            )
            response = request.execute()
        else:
            # If there are no more pages, exit the loop
            response = None

    # Return the list of comments
    return comments

# Fetch video details and comments for a specific video
video_id = "Insert ID Here"  # Replace with the desired video ID
video_title, channel_title, subscriber_count, view_count, upload_date = fetch_video_details(video_id)
comments = fetch_comments(video_id)

# Create a DataFrame from the comments
df = pd.DataFrame(comments)

# Save the DataFrame to a CSV file with the video title as the filename
csv_filename = f"{video_title.replace(' ', '_')}.csv"
df.to_csv(csv_filename, index=False)

# Print video details and the CSV filename
print(f"Video Title: {video_title}")
print(f"Channel Title: {channel_title}")
print(f"Subscriber Count: {subscriber_count}")
print(f"View Count: {view_count}")
print(f"Upload Date: {upload_date}")
print(f"Comments have been saved to {csv_filename}")
